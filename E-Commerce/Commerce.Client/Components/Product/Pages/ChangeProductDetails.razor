@page "/categories/{categoryId}/products/{productId}/edit"

@inject IAuthService AuthService
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<RefreshToken />
<RestrictAccess />

<style>
    .cropper-example {
        max-height: 300px;
        width: 80%;
    }

    .img-container {
        max-height: 400px;
        width: 80%;
    }
</style>


<MudText Typo="Typo.h3" Style="margin-top: 3rem; margin-bottom: 1rem;" Align="Align.Center">@product.Name</MudText>

<MudContainer Class="pt-16">
    <EditForm Model="ChangeDetailsModel" OnValidSubmit="SubmitChangeDetails">
        <DataAnnotationsValidator/>

        <MudContainer Class="d-flex justify-center mb-4">
            <MudText Typo="Typo.h5">Edit details</MudText>
        </MudContainer>

        <MudGrid Class="d-flex justify-center">
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex flex-nowrap justify-center align-center">
                            <MudIcon 
                                Icon="@(product.IsVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)" 
                                Color="@(product.IsVisible ? Color.Primary : Color.Secondary)" 
                                Variant="Variant.Filled" 
                                Class="mr-2"
                                Size="Size.Large"
                            />
                            <MudButton OnClick="() => ToggleVisibility()" Color="@(product.IsVisible ? Color.Primary : Color.Secondary)" Variant="Variant.Filled">
                                @(product.IsVisible ? "Visible" : "Invisible")
                            </MudButton>
                        </div>
                    </MudCardContent>

                    <MudCardContent>
                        <MudTextField Label="Name" @bind-Value="ChangeDetailsModel.Name" For="@(() => ChangeDetailsModel.Name)"/>
                        <MudTextField Label="Description" @bind-Value="ChangeDetailsModel.Description" For="@(() => ChangeDetailsModel.Description)"/>
                        <MudTextField Label="Price" @bind-Value="ChangeDetailsModel.Price" For="@(() => ChangeDetailsModel.Price)"/>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Primary" Class="mr-auto" @onclick="Cancel">Cancel</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                    </MudCardActions>

                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudContainer>

<MudContainer Class="pt-16" >
    <MudContainer Class="d-flex justify-center mb-4">
        <MudText Typo="Typo.h5">Change image</MudText>
    </MudContainer>
    
    <MudGrid Class="d-flex justify-center">
        <MudItem xs="12" sm="7">
            <MudStack Style="max-width: 50vw">
                <MudForm 
                    Model="@changeImageModel"
                         @bind-IsValid="isValid"
                         @bind-IsTouched="isTouched"
                         Validation="@validationRules.ValidateValue">
                    <MudItem xs="12">
                        @if (changeImageModel.Files is not null && changeImageModel.Files.Any())
                        {
                            <CropperComponent 
                                IsAvailableInitCropper="@IsAvailableInitCropper"
                                IsErrorLoadImage="@IsErrorLoadImage"
                                OnErrorLoadImageEvent="args => OnErrorLoadImageEvent(args)"
                                @ref="cropperComponent"
                                Class="cropper-example"
                                Src="@Src"
                                Options="cropperOptions"
                                />
                        }

                        <MudFileUpload 
                            T="IReadOnlyList<IBrowserFile>"
                            MaximumFileCount="1"
                            @bind-Files="changeImageModel.Files"
                            @bind-Files:after="@ClearDragClass"
                            For="@(() => changeImageModel.Files)"
                            Hidden="@false"
                            InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                            InputStyle="opacity:0"
                            OnFilesChanged="args => RebuildImageAsync(args)"
                            @ondragenter="@SetDragClass"
                            @ondragleave="@ClearDragClass"
                            @ondragend="@ClearDragClass">
                            <ButtonTemplate>
                                <MudPaper 
                                    Height="150px"
                                    Outlined="true"
                                    Class="@_dragClass">
                                    <MudText Typo="Typo.h6">
                                        Drag and drop files here or click
                                    </MudText>

                                    @foreach (var file in changeImageModel.Files?.Select(file => file.Name) ?? Enumerable.Empty<string>())
                                    {
                                        <MudChip Color="Color.Dark" Text="@file" Style="overflow: hidden; text-overflow: ellipsis"/>
                                    }
                                </MudPaper>

                                <MudToolBar DisableGutters="true"Class="relative d-flex justify-end gap-4 z-30">
                                    <MudButton HtmlTag="label"
                                               Color="Color.Primary"
                                               for="@context.Id"
                                               Variant="Variant.Filled">
                                        Open file picker
                                    </MudButton>

                                    <MudButton 
                                        OnClick="@SubmitChangeImage"
                                        Color="Color.Primary"
                                        Disabled="@(!isValid || !isTouched || changeImageModel.Files is null || !changeImageModel.Files.Any())"
                                        Variant="Variant.Filled">
                                        Upload
                                    </MudButton>

                                    <MudButton 
                                        OnClick="@context.Actions.ClearAsync"
                                        Color="Color.Error"
                                        Disabled="@(changeImageModel.Files is null || !changeImageModel.Files.Any())"
                                        Variant="Variant.Filled">
                                        Clear
                                    </MudButton>
                                </MudToolBar>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudItem>
                </MudForm>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudContainer>